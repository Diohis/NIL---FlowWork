from aiogram import Router, types,F,Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command,CommandStart, BaseFilter
from aiogram.types import Message, ReplyKeyboardRemove
import math
import random
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from core.keyboards.inline import *
from core.keyboards.reply import *
from core.filters.Filters import *
from core.settings import worksheet_city
from core.handlers.courier import city_info
import datetime
from datetime import date
import database

router = Router()
#group_id = -1002057238567
group_id = -4168135619

class CustomerRegistration(StatesGroup):
    fio = State()
    organization = State()
    city = State()
    email = State()
    phone = State()
    n=()

class NewForm(StatesGroup):
    city = State()
    store_name = State()
    adress_a = State()
    adress_b = State()
    cash = State()
class City(StatesGroup):
    city = State()
    n = ()


@router.message(Command(commands=["testmenu"]))
async def testmenu(message:Message):
    text = ""
    text+="‚ï≠ üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞:</b>\n"
    text+="‚îú  üìÑ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: </b>0\n"
    text+="‚ï∞ üìù <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: </b>0\n"
    text+="‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
    text+="‚ï≠ ‚úèÔ∏è <b>–§–ò–û:</b> –ö—É–ª–∞–∫–æ–≤ –î–º–∏—Ç—Ä–∏–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á\n"
    text+="‚îú  üíº <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: </b>NIL\n"
    text+="‚ï∞ üèôÔ∏è <b>–ì–æ—Ä–æ–¥: </b>–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫\n"
    text+="‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
    text+="üïí –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: 2023-03-17"
    
    await message.answer(text)



#===================================–ú–µ–Ω—é –ó–∞–∫–∞–∑—á–∏–∫–∞===================================
@router.callback_query(F.data=="customer")
async def customer_callback(callback: types.CallbackQuery,bot:Bot):
    if await database.check_customer(user_id = callback.from_user.id):
        expire_date = datetime.datetime.now() + datetime.timedelta(days=1)
        builder = create_customer_buttons(True) 
        message = f"–ú–µ–Ω—é –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é."
    else:
        message = "–ú–µ–Ω—é –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.\n–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞—è–≤–æ–∫"
        builder = create_customer_buttons(False)
    await callback.message.edit_text(text= message,reply_markup=builder.as_markup())
    
    
    
#===================================–ö–æ–ª–±–µ–∫ –ú–µ–Ω—é –ó–∞–∫–∞–∑—á–∏–∫–∞===================================
@router.callback_query(F.data.startswith("customer_"))
async def customer_button_callback(callback: types.CallbackQuery,state: FSMContext,bot: Bot):
    action = callback.data.split("_")[1]
    if action == "registration":
        await state.set_state(CustomerRegistration.fio)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û")
        await callback.answer()
    elif action == "newform":
        await state.set_state(City.city)
        cities = worksheet_city.col_values(1)[1:]
        await state.update_data(city = cities)
        await state.update_data(n = 1)
        builder = await create_choose_city_buttons(state)
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É—Ç–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞. –ï—Å–ª–∏ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç, —Ç–æ –≤—ã–±–∏—Ä–∞–π—Ç–µ –±–ª–∏–∂–∞–π—à–∏–π.",reply_markup = builder.as_markup())    
        await callback.answer()
    elif action == "back":
        builder = create_start_buttons()
        await callback.message.edit_text("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=builder.as_markup())
    elif action=="forms":
        forms = await database.get_customer_sent_request(callback.from_user.id)
        for form in forms:
            if form["status_work"]=="work":
                msg = "<b>–ó–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ</b>\n"+"-"*30+"\n"
                msg+=f"–ú–∞–≥–∞–∑–∏–Ω: {form["store_name"]}\n"
                msg+=f"–ê–¥—Ä–µ—Å –ê: {form["adress_a"]}\n"
                msg+=f"–ê–¥—Ä–µ—Å –ë: {form["adress_b"]}\n"
                msg+=f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {form["price"]}\n"
                msg+=f"–ö–æ–¥: {form["code"]}\n"
                builder = customer_finish(form["id"])
                await callback.message.answer(text = msg,reply_markup=builder.as_markup())
            elif form["status_work"]=="sent":
                msg = "<b>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞</b>\n"+"-"*30+"\n"
                msg+=f"–ú–∞–≥–∞–∑–∏–Ω: {form["store_name"]}\n"
                msg+=f"–ê–¥—Ä–µ—Å –ê: {form["adress_a"]}\n"
                msg+=f"–ê–¥—Ä–µ—Å –ë: {form["adress_b"]}\n"
                msg+=f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {form["price"]}\n"
                msg+=f"–ö–æ–¥: {form["code"]}\n"
                builder = form_cancel(form["id"])
                await callback.message.answer(text = msg,reply_markup=builder.as_markup())
        await callback.answer()
                
        
        
        
#===================================–§–ò–û===================================
@router.message(CustomerRegistration.fio,FioFilter())
async def customer_fio(message: Message,state: FSMContext):
    await state.update_data(fio = message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
    await state.set_state(CustomerRegistration.organization)

@router.message(CustomerRegistration.fio)
async def fio_incorrectly(message: Message):
    await message.answer(
        text="–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
    )
    


#===================================–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è===================================
@router.message(CustomerRegistration.organization)
async def customer_organization(message: Message,state: FSMContext):
    await state.update_data(organization = message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É")
    await state.set_state(CustomerRegistration.email)



#===================================Email===================================
@router.message(CustomerRegistration.email,EmailFilter())
async def customer_email(message: Message,state: FSMContext):
    await state.update_data(email = message.text)
    await state.set_state(CustomerRegistration.city)
    cities = []
    for i in city_info:
        if i["–ì–æ—Ä–æ–¥"]!="":
            cities.append(i["–ì–æ—Ä–æ–¥"])
        else:
            break
    await state.update_data(city = cities)
    await state.update_data(n = 1)
    builder = await create_choose_city_buttons(state)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥. –ï—Å–ª–∏ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç, —Ç–æ –≤—ã–±–∏—Ä–∞–π—Ç–µ –±–ª–∏–∂–∞–π—à–∏–π.",reply_markup = builder.as_markup())
    
@router.message(CustomerRegistration.email)
async def email_incorrectly(message: Message):
    await message.answer(
        text="–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π email, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
    )

#===================================–ö–æ–ª–±–µ–∫ –∫–Ω–æ–ø–æ–∫ –≥–æ—Ä–æ–¥–æ–≤===================================
@router.callback_query(F.data.startswith("city_"),CustomerRegistration.city)
async def customer_button_callback(callback: types.CallbackQuery,state: FSMContext,bot: Bot):
    action = callback.data.split("_")[1]
    if action == "next":
        data = await state.get_data()
        n = data["n"]
        city = data['city']
        if n+1>math.ceil(len(city)/6):
            await callback.answer("–≠—Ç–æ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞")
            return
        else:
            n+=1
        await state.update_data(n = n)
        builder = await create_choose_city_buttons(state)
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    elif action == "back":
        data = await state.get_data()
        n = data["n"]
        city = data['city']
        if n-1<1:
            await callback.answer("–≠—Ç–æ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞")
            return
        else:
            n-=1
        await state.update_data(n = n)
        builder = await create_choose_city_buttons(state)
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    elif action == "break":
        await state.clear()
        await callback.message.delete()
        await callback.answer()
    else:
        await state.update_data(city = int(action))
        await state.set_state(CustomerRegistration.phone)
        builder = create_contact_button()
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",reply_markup=builder.as_markup(resize_keyboard=True))
        await callback.answer()

# #===================================–ì–æ—Ä–æ–¥===================================
# @router.message(CustomerRegistration.city)
# async def customer_city(message: Message,state: FSMContext):
#     await state.update_data(city = message.text)
#     builder = create_contact_button()
#     await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",reply_markup=builder.as_markup(resize_keyboard=True))
#     await state.set_state(CustomerRegistration.phone)


#===================================–ù–æ–º–µ—Ä –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏===================================
@router.message(CustomerRegistration.phone,(F.contact!=None and F.contact.user_id == F.from_user.id))
async def customer_contact(message:Message,state: FSMContext,bot:Bot):
    await state.update_data(phone=message.contact.phone_number)
    data = await state.get_data()
    await state.clear()
    expire_date = datetime.datetime.now() + datetime.timedelta(days=1)
    chat_id = city_info[data["city"]]["chat id"]
    link = await bot.create_chat_invite_link(chat_id=chat_id, expire_date= int( expire_date.timestamp()),member_limit= 1)
    await message.answer(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏.\n–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –≥–æ—Ä–æ–¥–∞: {link.invite_link}",reply_markup=ReplyKeyboardRemove())
    new_customer =  {
        "username" : message.from_user.username,
        "user_id":message.from_user.id,
        "date_registration":str(date.today()),
        "fio":data["fio"],
        "city":city_info[data["city"]]["–ì–æ—Ä–æ–¥"],
        "phone":data["phone"],
        "email":data["email"],
        "organization":data["organization"]
    }
    await database.set_customer(new_customer)



#===================================–ö–æ–ª–±–µ–∫ –∫–Ω–æ–ø–æ–∫ –≥–æ—Ä–æ–¥–æ–≤===================================
@router.callback_query(F.data.startswith("city_"),City.city)
async def customer_button_callback(callback: types.CallbackQuery,state: FSMContext,bot: Bot):
    action = callback.data.split("_")[1]
    if action == "next":
        data = await state.get_data()
        n = data["n"]
        city = data['city']
        if n+1>math.ceil(len(city)/6):
            await callback.answer("–≠—Ç–æ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞")
            return
        else:
            n+=1
        await state.update_data(n = n)
        builder = await create_choose_city_buttons(state)
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    elif action == "back":
        data = await state.get_data()
        n = data["n"]
        city = data['city']
        if n-1<1:
            await callback.answer("–≠—Ç–æ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞")
            return
        else:
            n-=1
        await state.update_data(n = n)
        builder = await create_choose_city_buttons(state)
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    elif action == "break":
        await state.clear()
        await callback.message.delete()
        await callback.answer()
    else:
        await state.set_state(NewForm.store_name)
        await state.update_data(city = int(action))
        builder = create_none_store_button()
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å. –ï—Å–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.",reply_markup=builder.as_markup(resize_keyboard=True))
        await callback.answer()



#===================================–ú–∞–≥–∞–∑–∏–Ω===================================
@router.message(NewForm.store_name)
async def form_store(message: Message,state: FSMContext):
    await state.update_data(store_name = message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ—á–∫–∏ –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ (–ü—É–Ω–∫—Ç –ê)",reply_markup=ReplyKeyboardRemove())
    await state.set_state(NewForm.adress_a)



#===================================–ê–¥—Ä–µ—Å-–ê===================================
@router.message(NewForm.adress_a)
async def form_adress_a(message: Message,state: FSMContext):
    await state.update_data(adress_a = message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ—á–∫–∏ –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ (–ü—É–Ω–∫—Ç –ë)")
    await state.set_state(NewForm.adress_b)



#===================================–ê–¥—Ä–µ—Å-–ë===================================
@router.message(NewForm.adress_b)
async def form_adress_b(message: Message,state: FSMContext):
    await state.update_data(adress_b = message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏")
    await state.set_state(NewForm.cash)



#===================================–°—Ç–æ–∏–º–æ—Å—Ç—å===================================
@router.message(NewForm.cash)
async def form_store(message: Message,state: FSMContext):
    await state.update_data(cash = message.text)
    msg = "–í–µ—Ä–Ω—ã –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?\n"+"-"*30+"\n"
    data = await state.get_data()
    city = worksheet_city.col_values(1)[1:][data["city"]]
    msg+=f"–ì–æ—Ä–æ–¥: {city}\n"
    msg+=f"–ú–∞–≥–∞–∑–∏–Ω: {data["store_name"]}\n"
    msg+=f"–ê–¥—Ä–µ—Å –ê: {data["adress_a"]}\n"
    msg+=f"–ê–¥—Ä–µ—Å –ë: {data["adress_b"]}\n"
    msg+=f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {data["cash"]}\n"
    builder = create_customer_send_form_buttons()
    await message.answer(msg,reply_markup=builder.as_markup())



#===================================–ö–æ–ª–±–µ–∫ –∫–Ω–æ–ø–æ–∫ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö===================================
@router.callback_query(F.data.startswith("form_"))
async def customer_form_button_callback(callback: types.CallbackQuery,state: FSMContext,bot: Bot):
    action = callback.data.split("_")[1]
    if action == "send":
        data = await state.get_data()
        alphabet = list("abcdefghijklmnopqrstuvwxyz")
        upp = list("abcdefghijklmnopqrstuvwxyz".upper())
        code_array = alphabet+upp+list("1234567890")
        code=""
        for i in range(5):
            code+=random.choice(code_array)
        await callback.message.delete()
        chat_id = city_info[data["city"]]["chat id"]
        await callback.message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É –≥–æ—Ä–æ–¥–∞.")
        await callback.answer()
        msg = "<b>–ó–ê–Ø–í–ö–ê</b>\n"+"-"*30+"\n"
        data = await state.get_data()
        msg+=f"–ú–∞–≥–∞–∑–∏–Ω: {data["store_name"]}\n"
        city = city_info[data["city"]]["–ì–æ—Ä–æ–¥"]
        msg+=f"–ì–æ—Ä–æ–¥: {city}\n"
        msg+=f"–ê–¥—Ä–µ—Å –ê: {data["adress_a"]}\n"
        msg+=f"–ê–¥—Ä–µ—Å –ë: {data["adress_b"]}\n"
        msg+=f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {data["cash"]}\n"
        msg = await bot.send_message(chat_id = group_id, text = msg)
        newreq = {
            "username_customer":callback.from_user.username,
            "user_id_customer":callback.from_user.id,
            "date_registration":str(date.today()),
            "status_work":"sent",
            "adress_a":data["adress_a"],
            "adress_b":data["adress_b"],
            "code":code,
            "price":int(data["cash"]),
            "store_name":data["store_name"],
            "message_id":msg.message_id,
            "chat_id":group_id
        }
        await database.set_request(newreq)
        builder = create_form_buttons(await database.get_request_id(msg.message_id))
        await bot.edit_message_reply_markup(chat_id=group_id,message_id=msg.message_id,reply_markup=builder.as_markup())
        await state.clear()
        await callback.answer()
    elif action == "repeat":
        await callback.message.delete()
        await state.set_state(City.city)
        cities = worksheet_city.col_values(1)[1:]
        await state.update_data(city = cities)
        await state.update_data(n = 1)
        builder = await create_choose_city_buttons(state)
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É—Ç–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞. –ï—Å–ª–∏ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç, —Ç–æ –≤—ã–±–∏—Ä–∞–π—Ç–µ –±–ª–∏–∂–∞–π—à–∏–π.",reply_markup = builder.as_markup())    
        await callback.answer()
    else:
        await callback.message.delete()
        await state.clear()
        await callback.answer()
        
        
        
#===================================–ö–æ–ª–±–µ–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∑–∞—è–≤–∫–µ===================================
@router.callback_query(F.data.startswith("request_"))
async def customer_forms_button_callback(callback: types.CallbackQuery,state: FSMContext,bot: Bot):
    action = callback.data.split("_")[1]
    if action == "chat":
        pass
    else:
        form = await database.get_request(int(action))
        if form["user_id_customer"]==callback.from_user.id:
            callback.message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–≤–æ—é –∑–∞—è–≤–∫—É.")
            return
        msg = "<b>–ù–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É –æ—Ç–≤–µ—Ç–∏–ª–∏</b>\n"+"-"*30+"\n"
        msg+=f"–ú–∞–≥–∞–∑–∏–Ω: {form["store_name"]}\n"
        msg+=f"–ê–¥—Ä–µ—Å –ê: {form["adress_a"]}\n"
        msg+=f"–ê–¥—Ä–µ—Å –ë: {form["adress_b"]}\n"
        msg+=f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {form["price"]}\n"
        msg+=f"–ö–æ–¥: {form["code"]}\n"
        builder = status_work()
        await bot.edit_message_reply_markup(chat_id=form["chat_id"],message_id=form["message_id"],reply_markup=builder.as_markup())
        builder = customer_finish(int(action))
        await bot.send_message(chat_id = form["user_id_customer"], text = msg,reply_markup=builder.as_markup())
        msg = "<b>–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –∑–∞—è–≤–∫—É</b>\n"+"-"*30+"\n"
        msg+=f"–ú–∞–≥–∞–∑–∏–Ω: {form["store_name"]}\n"
        msg+=f"–ê–¥—Ä–µ—Å –ê: {form["adress_a"]}\n"
        msg+=f"–ê–¥—Ä–µ—Å –ë: {form["adress_b"]}\n"
        msg+=f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {form["price"]}\n"
        msg+=f"–ö–æ–¥: {form["code"]}\n"
        builder = courier_finish(int(action))
        await bot.send_message(chat_id = callback.from_user.id, text = msg,reply_markup=builder.as_markup())
        await database.change_status_work(int(action),"work")



#===================================–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ –≤ –º–µ–Ω—é –∫–∞—Å—Ç–æ–º–µ—Ä–∞===================================
@router.callback_query(F.data.startswith("formcancel_"))
async def customer_forms_button_callback(callback: types.CallbackQuery,state: FSMContext,bot: Bot):
    action = callback.data.split("_")[1]
    form = await database.get_request(int(action))
    await database.change_status_work(int(action),"finish")
    try:
        await bot.delete_message(chat_id=form["chat_id"],message_id=form["message_id"])
        await callback.message.delete()
    except:
        pass
    finally:
        await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

#===================================–ö–æ–ª–±–µ–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∑–∞—è–≤–∫–µ –≤ —Ä–∞–±–æ—Ç–µ===================================
@router.callback_query(F.data.startswith("finish_"))
async def all_form_button_callback(callback: types.CallbackQuery,state: FSMContext,bot: Bot):
    autor = callback.data.split("_")[1]
    id = callback.data.split("_")[2]
    if autor=="customer":
        await database.change_status_work(int(id),"finish")
        form = await database.get_request(int(id))
        try:
            await bot.delete_message(chat_id=form["chat_id"],message_id=form["message_id"])
            await callback.message.delete()
        except:
            pass
        finally:
            await callback.answer()
    else:
        form = await database.get_request(int(id))
        if form["status_work"]=="finish":
            await callback.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return
        await database.change_status_work(id,"sent")
        await bot.send_message(chat_id=form["user_id_customer"],text=f"–ö—É—Ä—å–µ—Ä –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞—è–≤–∫–∏ —Å –∫–æ–¥–æ–º <b>{form["code"]}</b>.\n–ó–∞—è–≤–∫–∞ —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç–∞.")