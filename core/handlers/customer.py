from aiogram import Router, types,F,Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command,CommandStart, BaseFilter
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from core.keyboards.inline import *
from core.keyboards.reply import *
from core.filters.Filters import *
import datetime
from datetime import date
import database

router = Router()
group_id = -1002057238567

class CustomerRegistration(StatesGroup):
    fio = State()
    organization = State()
    city = State()
    email = State()
    phone = State()
    


@router.message(Command(commands=["testmenu"]))
async def testmenu(message:Message):
    text = ""
    text+="‚ï≠ üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞:</b>\n"
    text+="‚îú  üìÑ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: </b>0\n"
    text+="‚ï∞ üìù <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: </b>0\n"
    text+="‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
    text+="‚ï≠ ‚úèÔ∏è <b>–§–ò–û:</b> –ö—É–ª–∞–∫–æ–≤ –î–º–∏—Ç—Ä–∏–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á\n"
    text+="‚îú  üíº <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: </b>NIL\n"
    text+="‚ï∞ üèôÔ∏è <b>–ì–æ—Ä–æ–¥: </b>–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫\n"
    text+="‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
    text+="üïí –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: 2023-03-17"
    
    await message.answer(text)



#===================================–ú–µ–Ω—é –ó–∞–∫–∞–∑—á–∏–∫–∞===================================
@router.callback_query(F.data=="customer")
async def customer_callback(callback: types.CallbackQuery,bot:Bot):
    if await database.check_customer(user_id = callback.from_user.id):
        expire_date = datetime.datetime.now() + datetime.timedelta(days=1)
        link = await bot.create_chat_invite_link(chat_id=group_id, expire_date= int( expire_date.timestamp()),member_limit= 1)
        builder = create_customer_buttons(True,link.invite_link) 
        message = f"–ú–µ–Ω—é –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é."
    else:
        message = "–ú–µ–Ω—é –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.\n–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞—è–≤–æ–∫"
        builder = create_customer_buttons(False)
    await callback.message.edit_text(text= message,reply_markup=builder.as_markup())
    
    
    
#===================================–ö–æ–ª–±–µ–∫ –ú–µ–Ω—é –ó–∞–∫–∞–∑—á–∏–∫–∞===================================
@router.callback_query(F.data.startswith("customer_"))
async def customer_button_callback(callback: types.CallbackQuery,state: FSMContext,bot: Bot):
    action = callback.data.split("_")[1]
    if action == "registration":
        await state.set_state(CustomerRegistration.fio)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û")
        await callback.answer()
    elif action == "back":
        builder = create_start_buttons()
        await callback.message.edit_text("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=builder.as_markup())
        
        
        
#===================================–§–ò–û===================================
@router.message(CustomerRegistration.fio,FioFilter())
async def customer_fio(message: Message,state: FSMContext):
    await state.update_data(fio = message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
    await state.set_state(CustomerRegistration.organization)

@router.message(CustomerRegistration.fio)
async def fio_incorrectly(message: Message):
    await message.answer(
        text="–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
    )
    


#===================================–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è===================================
@router.message(CustomerRegistration.organization)
async def customer_organization(message: Message,state: FSMContext):
    await state.update_data(organization = message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É")
    await state.set_state(CustomerRegistration.email)



#===================================Email===================================
@router.message(CustomerRegistration.email,EmailFilter())
async def customer_email(message: Message,state: FSMContext):
    await state.update_data(email = message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥")
    await state.set_state(CustomerRegistration.city)
    
@router.message(CustomerRegistration.email)
async def email_incorrectly(message: Message):
    await message.answer(
        text="–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π email, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
    )



#===================================–ì–æ—Ä–æ–¥===================================
@router.message(CustomerRegistration.city)
async def customer_city(message: Message,state: FSMContext):
    await state.update_data(city = message.text)
    builder = create_contact_button()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",reply_markup=builder.as_markup(resize_keyboard=True))
    await state.set_state(CustomerRegistration.phone)


#===================================–ù–æ–º–µ—Ä –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏===================================
@router.message(CustomerRegistration.phone,(F.contact!=None and F.contact.user_id == F.from_user.id))
async def customer_contact(message:Message,state: FSMContext,bot:Bot):
    await state.update_data(phone=message.contact.phone_number)
    data = await state.get_data()
    await state.clear()
    expire_date = datetime.datetime.now() + datetime.timedelta(days=1)
    link = await bot.create_chat_invite_link(chat_id=group_id, expire_date= int( expire_date.timestamp()),member_limit= 1)
    await message.answer(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏.\n–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –≥–æ—Ä–æ–¥–∞: {link.invite_link}",reply_markup=ReplyKeyboardRemove())
    new_customer =  {
        "username" : message.from_user.username,
        "user_id":message.from_user.id,
        "date_registration":str(date.today()),
        "fio":data["fio"],
        "city":data["city"],
        "phone":data["phone"],
        "email":data["email"],
        "organization":data["organization"]
    }
    await database.set_customer(new_customer)